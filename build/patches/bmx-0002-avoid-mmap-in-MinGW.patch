From da2761d9f926c2c86ec2dd5eec101f6d7ad0b7a7 Mon Sep 17 00:00:00 2001
From: RiCON <RiCON@nowhere>
Date: Wed, 13 Jan 2016 19:31:12 +0000
Subject: [PATCH 2/2] avoid mmap in MinGW

---
 apps/bmxtranswrap/bmxtranswrap.cpp   |  8 ++++----
 apps/mxf2raw/mxf2raw.cpp             | 10 +++++-----
 include/bmx/apps/AppMXFFileFactory.h |  6 +++---
 src/apps/AppMXFFileFactory.cpp       | 10 +++++-----
 4 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/apps/bmxtranswrap/bmxtranswrap.cpp b/apps/bmxtranswrap/bmxtranswrap.cpp
index 38d89d2..afe3926 100644
--- a/apps/bmxtranswrap/bmxtranswrap.cpp
+++ b/apps/bmxtranswrap/bmxtranswrap.cpp
@@ -364,7 +364,7 @@ static void usage(const char *cmd)
     fprintf(stderr, "  --rw-intl               Interleave input reads with output writes\n");
     fprintf(stderr, "  --rw-intl-size          The interleave size. Default is %u\n", DEFAULT_RW_INTL_SIZE);
     fprintf(stderr, "                          Value must be a multiple of the system page size, %u\n", mxf_get_system_page_size());
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
     fprintf(stderr, "  --seq-scan              Set the sequential scan hint for optimizing file caching whilst reading\n");
     fprintf(stderr, "  --mmap-file             Use memory-mapped file I/O for the MXF files\n");
     fprintf(stderr, "                          Note: this may reduce file I/O performance and was found to be slower over network drives\n");
@@ -683,7 +683,7 @@ int main(int argc, const char** argv)
     uint8_t rdd6_sdid = DEFAULT_RDD6_SDID;
     uint32_t http_min_read = DEFAULT_HTTP_MIN_READ;
     bool mp_track_num = false;
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
     bool use_mmap_file = false;
 #endif
     vector<EmbedXMLInfo> embed_xml;
@@ -1022,7 +1022,7 @@ int main(int argc, const char** argv)
             rw_interleave_size = uvalue;
             cmdln_index++;
         }
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
         else if (strcmp(argv[cmdln_index], "--seq-scan") == 0)
         {
             input_file_flags |= MXF_WIN32_FLAG_SEQUENTIAL_SCAN;
@@ -1977,7 +1977,7 @@ int main(int argc, const char** argv)
         if (rw_interleave)
             file_factory.SetRWInterleave(rw_interleave_size);
         file_factory.SetHTTPMinReadSize(http_min_read);
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
         file_factory.SetUseMMapFile(use_mmap_file);
 #endif
 
diff --git a/apps/mxf2raw/mxf2raw.cpp b/apps/mxf2raw/mxf2raw.cpp
index 5ecc5c8..a7416e6 100644
--- a/apps/mxf2raw/mxf2raw.cpp
+++ b/apps/mxf2raw/mxf2raw.cpp
@@ -1505,7 +1505,7 @@ static void usage(const char *cmd)
     fprintf(stderr, " --noro                Don't include roll-out frames\n");
     fprintf(stderr, " --rt <factor>         Read at realtime rate x <factor>, where <factor> is a floating point value\n");
     fprintf(stderr, "                       <factor> value 1.0 results in realtime rate, value < 1.0 slower and > 1.0 faster\n");
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
     fprintf(stderr, " --no-seq-scan         Do not set the sequential scan hint for optimizing file caching\n");
     fprintf(stderr, " --mmap-file           Use memory-mapped file I/O for the MXF files\n");
     fprintf(stderr, "                       Note: this may reduce file I/O performance and was found to be slower over network drives\n");
@@ -1574,7 +1574,7 @@ int main(int argc, const char** argv)
     int64_t duration = -1;
     bool no_precharge = false;
     bool no_rollout = false;
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
     int file_flags = MXF_WIN32_FLAG_SEQUENTIAL_SCAN;
 #else
     int file_flags = 0;
@@ -1587,7 +1587,7 @@ int main(int argc, const char** argv)
     float gf_rate_after_fail = DEFAULT_GF_RATE_AFTER_FAIL;
     uint32_t http_min_read = DEFAULT_HTTP_MIN_READ;
     ChecksumType checkum_type;
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
     bool use_mmap_file = false;
 #endif
     const char *text_output_prefix = 0;
@@ -1955,7 +1955,7 @@ int main(int argc, const char** argv)
             realtime = true;
             cmdln_index++;
         }
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
         else if (strcmp(argv[cmdln_index], "--no-seq-scan") == 0)
         {
             file_flags &= ~MXF_WIN32_FLAG_SEQUENTIAL_SCAN;
@@ -2208,7 +2208,7 @@ int main(int argc, const char** argv)
             file_factory.SetInputChecksumTypes(file_checksum_types);
         file_factory.SetInputFlags(file_flags);
         file_factory.SetHTTPMinReadSize(http_min_read);
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
         file_factory.SetUseMMapFile(use_mmap_file);
 #endif
 
diff --git a/include/bmx/apps/AppMXFFileFactory.h b/include/bmx/apps/AppMXFFileFactory.h
index fe31eef..5c03372 100644
--- a/include/bmx/apps/AppMXFFileFactory.h
+++ b/include/bmx/apps/AppMXFFileFactory.h
@@ -42,7 +42,7 @@
 
 #include <mxf/mxf_rw_intl_file.h>
 
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
 #include <mxf/mxf_win32_file.h>
 #include <mxf/mxf_win32_mmap.h>
 #endif
@@ -64,7 +64,7 @@ public:
     void SetInputFlags(int flags);
     void SetRWInterleave(uint32_t rw_interleave_size);
     void SetHTTPMinReadSize(uint32_t size);
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
     void SetUseMMapFile(bool enable);
 #endif
 
@@ -103,7 +103,7 @@ private:
     std::vector<InputChecksumFile> mInputChecksumFiles;
     MXFRWInterleaver *mRWInterleaver;
     uint32_t mHTTPMinReadSize;
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
     bool mUseMMapFile;
 #endif
 };
diff --git a/src/apps/AppMXFFileFactory.cpp b/src/apps/AppMXFFileFactory.cpp
index fb16a3f..e2c59e6 100644
--- a/src/apps/AppMXFFileFactory.cpp
+++ b/src/apps/AppMXFFileFactory.cpp
@@ -54,7 +54,7 @@ AppMXFFileFactory::AppMXFFileFactory()
     mInputFlags = 0;
     mRWInterleaver = 0;
     mHTTPMinReadSize = 64 * 1024;
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
     mUseMMapFile = false;
 #endif
 }
@@ -98,7 +98,7 @@ void AppMXFFileFactory::SetHTTPMinReadSize(uint32_t size)
     mHTTPMinReadSize = size;
 }
 
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
 void AppMXFFileFactory::SetUseMMapFile(bool enable)
 {
     mUseMMapFile = enable;
@@ -114,7 +114,7 @@ File* AppMXFFileFactory::OpenNew(string filename)
 
     try
     {
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
         if (mUseMMapFile)
             BMX_CHECK(mxf_win32_mmap_open_new(filename.c_str(), 0, &mxf_file));
         else
@@ -153,7 +153,7 @@ File* AppMXFFileFactory::OpenRead(string filename)
                 mxf_file = mxf_http_file_open_read(filename, mHTTPMinReadSize);
                 uri_str = filename;
             } else {
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
                 if (mUseMMapFile)
                     BMX_CHECK(mxf_win32_mmap_open_read(filename.c_str(), mInputFlags, &mxf_file));
                 else
@@ -215,7 +215,7 @@ File* AppMXFFileFactory::OpenModify(string filename)
 
     try
     {
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
         if (mUseMMapFile)
             BMX_CHECK(mxf_win32_mmap_open_modify(filename.c_str(), 0, &mxf_file));
         else
-- 
2.7.0

